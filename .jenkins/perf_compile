def shared_library_branch = scm.branches[0].name
if (shared_library_branch .contains("*/")) {
    shared_library_branch  = shared_library_branch.split("\\*/")[1]
   }
echo shared_library_branch 

library "jenkins-shared@${shared_library_branch}"


def VerifyArgs()
{
    if(params.job_label == '')
    {
      error "Please specify a job label"
    }
    
    //if(params.arch == '' || params.num_cu == '')
    //{
    //  error "Arch and num_cu must both be specified"
    //}

    if(params.rocm_version == '' && params.osdb_bkc_version == '')
    {
      error "Either ROCm version or OSDB build number is required"
    }

    if(params.rocm_version != '' && params.osdb_bkc_version != '')
    {
      error "Can only specify either the ROCm version or the OSDB build number"
    }
}


pipeline {
  agent { node { label 'mysql' } }
  environment {
      docker_args = "--network host -e TUNA_LOGLEVEL=${tuna_loglevel} -e gateway_ip=${gateway_ip} -e gateway_port=${gateway_port} -e gateway_user=${gateway_user}"
      partition = "${slurm_partition}"
      backend = "HIP"
      tuna_docker_name = utils.getDockerName("${backend}")
  }
  parameters {
    string(name: 'branch_name', defaultValue: 'compile_pipe', description: '')
    string(name: 'miopen_branch_name', defaultValue: 'develop', description: 'MIOpen branch used to build dockers')
    choice(name: 'use_mlir', choices: ['On', 'Off'], description: 'Build MIOpen with MLIR enabled')
    booleanParam(name: 'dynamic_solvers_only', defaultValue: false, description: 'Only use dynamic solvers in tuning')
    string(name: 'job_label', defaultValue: '', description: 'Label for new jobs.')
    string(name: 'session_id', defaultValue: '', description: 'session id for update applicability')
    string(name: 'slurm_partition', defaultValue: 'gpu-node', description: 'Name of the slurm partition to run jobs on')
    choice(name: 'tuna_loglevel', choices: ['WARN', 'ERROR', 'INFO'], description: 'Log level for TUNA')
    string(name: 'env', defaultValue: '', description: 'Additional environment variables for compilation.')
    string(name: 'db_host', defaultValue: "${headnode}", description: 'Name of the machine hosting the database instance')
    string(name: 'rocm_version', defaultValue: '', description: 'Version of ROCm for base docker packages, exclusive with osdb_bkc_version')
    string(name: 'osdb_bkc_version', defaultValue: '', description: 'Build number for OSDB, exclusive with rocm_version')
    string(name: 'db_name', defaultValue: "${PIPELINE_DB_NAME}", description: 'Name of the database schema')
    string(name: 'db_user', defaultValue: "${PIPELINE_USER}", description: 'Username for the databse')
    string(name: 'db_password', defaultValue: "${PIPELINE_PWD}", description: 'Password for the user')
    string(name: 'docker_registry', defaultValue: "${headnode}:5000", description: 'Name of the docker registry for pushing images')
    string(name: 'base_image', defaultValue: '', description: 'Put a fully qualified docker name here to use (optional)')
    choice(name: 'stage', choices: ['perf', 'fin_find'], description: 'Compile method')
  }
  stages {
    stage("Check params") {
      steps {
            VerifyArgs()
      }
    }
    stage('compile') {
      steps {
        script {
          utils.compile()
        }
      }
    }
  }
  post {
    always {
      script {
          echo "clean up container"
          utils.killContainer()
      }
    }
  }
}
