def shared_library_branch = scm.branches[0].name
if (shared_library_branch .contains("*/")) {
    shared_library_branch  = shared_library_branch.split("\\*/")[1]
   }
def util_lib="jenkins-shared@${shared_library_branch}"
echo "${util_lib}"

library "${util_lib}"

def VerifyArgs()
{
    if(params.session_id == '')
    {
      error "Please specify a session_id"
    }
}
pipeline {
  agent { node { label 'slurm' } }
    environment {
      backend = 'HIP'
      docker_args = "--network host -e TUNA_LOGLEVEL=${tuna_loglevel} -e TUNA_DB_HOSTNAME=${db_host} -e TUNA_DB_NAME=${params.db_name} -e TUNA_DB_USER_NAME=${db_user} -e TUNA_DB_PASSWORD=${db_password} -e gateway_ip=${gateway_ip} -e gateway_port=${gateway_port} -e gateway_user=${gateway_user} --privileged --device=/dev/kfd --device /dev/dri:/dev/dri:rw --volume /dev/dri:/dev/dri:rw --group-add video"
      db_name = "${params.db_name}"
      branch_id = "${params.branch_name}_${BUILD_ID}"
  }
  parameters {
    string(name: 'branch_name', defaultValue: 'eval_pipe_gold', description: '')
    choice(name: 'use_mlir', choices: ['On', 'Off'], description: 'Build MIOpen with MLIR enabled')
    booleanParam(name: 'dynamic_solvers_only', defaultValue: false, description: 'Only use dynamic solvers in tuning')
    string(name: 'session_id', defaultValue: '', description: 'session id for evaluation')
    choice(name: 'tuna_loglevel', choices: ['WARN', 'ERROR', 'INFO'], description: 'Log level for TUNA')
    string(name: 'env', defaultValue: 'HIP_KERNEL_ARG=1', description: 'Additional environment variables for compilation.')
    string(name: 'db_host', defaultValue: "${headnode}", description: 'Name of the machine hosting the database instance')
    string(name: 'db_name', defaultValue: "${PIPELINE_DB_NAME}", description: 'Name of the database schema')
    string(name: 'db_user', defaultValue: "${PIPELINE_USER}", description: 'Username for the databse')
    string(name: 'db_password', defaultValue: "${PIPELINE_PWD}", description: 'Password for the user')
    string(name: 'docker_registry', defaultValue: "${DOCKER_REGISTRY}", description: 'Name of the docker registry for pushing images')
    choice(name: 'stage', choices: ['perf', 'fin_find'], description: 'Evaluate method')
  }
  stages {
    stage("Check params")
    {
      steps {
          VerifyArgs()   
      }
    }
    stage('evaluate')
    {
      steps {
        script {
          utils.evaluate(params)
        }
      }
    }
  }
  post {
    always {
      script {
          echo "clean up container"
          utils.killContainer()
      }
    }
  }
}



