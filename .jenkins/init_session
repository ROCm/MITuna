def shared_library_branch = scm.branches[0].name
if (shared_library_branch .contains("*/")) {
    shared_library_branch  = shared_library_branch.split("\\*/")[1]
   }
def util_lib="jenkins-shared@${shared_library_branch}"
echo "${util_lib}"

library "${util_lib}"

def initSession(){
  backend = "HIPNOGPU"
  def tuna_docker
  def tuna_docker_name = utils.getDockerName("HIPNOGPU")
  def build_args = "--build-arg FIN_TOKEN=${FIN_TOKEN} --network host --build-arg ROCMVERSION=${params.rocm_version} --build-arg OSDB_BKC_VERSION=${params.osdb_bkc_version} --build-arg BACKEND=${backend} --build-arg MIOPEN_BRANCH=${miopen_branch_name} --build-arg DB_NAME=${params.db_name} --build-arg DB_USER_NAME=${db_user} --build-arg DB_USER_PASSWORD=${db_password} --build-arg DB_HOSTNAME=${db_host} --build-arg MIOPEN_USE_MLIR=${params.use_mlir}"

  if(params.base_image != '')
  {
    build_args = build_args + " --build-arg BASEIMAGE=${params.base_image} --build-arg ROCM_PRE=1"
  }
  sh "echo ${build_args}"

  tuna_docker = docker.build("${tuna_docker_name}", "${build_args} ." )

  def docker_run_args = "--network host  --dns 8.8.8.8 --device=/dev/kfd --device /dev/dri:/dev/dri:rw --volume /dev/dri:/dev/dri:rw --group-add video -e TUNA_DB_HOSTNAME=${db_host} -e TUNA_DB_NAME=${params.db_name} -e TUNA_DB_USER_NAME=${db_user} -e TUNA_DB_PASSWORD=${db_password} -e gateway_ip=${gateway_ip} -e gateway_port=${gateway_port} -e gateway_user=${gateway_user} -e TUNA_LOGLEVEL=${params.tuna_loglevel}"

  def num_session_prev = utils.runsql("SELECT count(*) from session where reason='${job_label}';")

  if(params.arch != '' && params.num_cu != '')
  {
    def margs = "-a ${params.arch} -n ${params.num_cu}"
    sh "docker run ${docker_run_args} ${tuna_docker_name} ./tuna/go_fish.py miopen --init_session -l ${job_label} ${margs}"
  }
  else
  {
    tuna_docker.push()
    sh "srun --no-kill -p ${slurm_partition} -N 1 -l bash -c 'docker run ${docker_run_args} ${tuna_docker_name} ./tuna/go_fish.py miopen --init_session -l ${job_label}'"
  }

  def num_session_now = utils.runsql("SELECT count(*) from session where reason='${job_label}';")
  println "Number of ${job_label} sessions: ${num_session_now}"
  if(num_session_prev.toInteger() >= num_session_now.toInteger()){
      error("Session is not correctly initialized with the reason:${job_label}")
  }
}

def VerifyArgs()
{
    if(params.rocm_version == '' && params.osdb_bkc_version == '')
    {
      error "Either ROCm version or OSDB build number is required"
    }

    if(params.rocm_version != '' && params.osdb_bkc_version != '')
    {
      error "Can only specify either the ROCm version or the OSDB build number"
    }

    if(params.job_label=='')
    {
        error "Job label is required for init session!"
    }
}

pipeline {
  agent { node { label 'mysql' } }
  environment {
      db_name = "${params.db_name}"
      db_host = "${params.db_host}"
      db_user = "${params.db_user}"
      db_password = "${params.db_password}"
  }
  parameters {
    string(name: 'branch_name', defaultValue: 'init_session', description: '')
    string(name: 'miopen_branch_name', defaultValue: 'develop', description: 'MIOpen branch used to build dockers')
    string(name: 'slurm_partition', defaultValue: 'gpu-node', description: 'Name of the slurm partition to run jobs on')    
    string(name: 'arch', defaultValue: '', description: 'Manual override arch')
    string(name: 'num_cu', defaultValue: '', description: 'Manual override num_cu')
    string(name: 'job_label', defaultValue: '', description: 'Label for new session')
    choice(name: 'tuna_loglevel', choices: ['WARN', 'ERROR', 'INFO'], description: 'Log level for TUNA')
    choice(name: 'use_mlir', choices: ['On', 'Off'], description: 'Build MIOpen with MLIR enabled')
    string(name: 'db_host', defaultValue: "${headnode}", description: 'Name of the machine hosting the database instance')
    string(name: 'rocm_version', defaultValue: '', description: 'Version of ROCm for base docker packages, exclusive with osdb_bkc_version')
    string(name: 'osdb_bkc_version', defaultValue: '', description: 'Build number for OSDB, exclusive with rocm_version')
    string(name: 'db_name', defaultValue: "${PIPELINE_DB_NAME}", description: 'Name of the database schema')
    string(name: 'db_user', defaultValue: "${PIPELINE_USER}", description: 'Username for the databse')
    string(name: 'db_password', defaultValue: "${PIPELINE_PWD}", description: 'Password for the user')
    string(name: 'docker_registry', defaultValue: "${headnode}:5000", description: 'Name of the docker registry for pushing images')
    string(name: 'base_image', defaultValue: '', description: 'Put a fully qualified docker name here to use (optional)')
  }
  stages {
    stage("Check params")
    {
      steps {
        VerifyArgs()   
      }
    }
    stage('fin Solvers') 
    {
      steps{
        initSession()
      }
    }
  }
}
