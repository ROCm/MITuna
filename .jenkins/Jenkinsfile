def runsql(query) {
    echo "query: ${query}"
    def cmd = $/mysql --protocol tcp -h ${db_host} -u ${db_user} -p${db_password} "${db_name}" -e "${query}" -N -s /$
    def res = sh (script: "${cmd}", returnStdout: true).trim()
    return res
}

def getJobReason()
{
  def job_reason = "find_${branch_name}_${miopen_branch_name}_${env.BUILD_ID}"
  return job_reason
}

def getDockerName(backend)
{
  def tuna_docker_name = "${docker_registry}/ci-tuna:${branch_name}_${backend}_${env.BUILD_ID}"
  return tuna_docker_name
}

def finApplicability(){
    def tuna_docker = docker.build("ci-tuna:${branch_name}_nogpu", " --build-arg BACKEND=HIPNOGPU .")
    tuna_docker.inside("--network host ") {
        checkout scm
        env.TUNA_DB_HOSTNAME = "${db_host}"
        env.TUNA_DB_NAME="${db_name}"
        env.TUNA_DB_USER_PASSWORD = "${db_password}"
        env.TUNA_DB_USER_NAME ="${db_user}"
        sh "./tuna/go_fish.py --update_applicability"
        def num_sapp = runsql("SELECT count(*) from solver_applicability;")
        println "Count(*) solver_applicability table: ${num_sapp}"
        if (num_sapp.toInteger() == 0){
            error("Unable to get applicability from Fin")
        }
    }
}

def finSolvers(){
        def branch_name = "${branch_name}"
        def tuna_docker = docker.build("ci-tuna:${branch_name}")   
        def docker_args = '--privileged --device=/dev/kfd --device /dev/dri:/dev/dri:rw --volume /dev/dri:/dev/dri:rw -v /var/lib/docker/:/var/lib/docker --group-add video'
        tuna_docker.inside("--network host  ${docker_args}") {
            checkout scm
            env.TUNA_DB_HOSTNAME = "${db_host}"
            env.TUNA_DB_NAME="${db_name}"
            env.TUNA_DB_USER_PASSWORD = "${db_password}"
            env.TUNA_DB_USER_NAME ="${db_user}"
            sh "./tuna/go_fish.py --update_solvers"
            def num_solvers = runsql("SELECT count(*) from solver;")
            println "Number of solvers: ${num_solvers}"
            if (num_solvers.toInteger() == 0){
                error("Unable to add solvers from Fin")
            } 
        }
    }

def finFindCompile()
{
  def build_args = " --build-arg BACKEND=HIPNOGPU --build-arg MIOPEN_CACHE_DIR= --build-arg MIOPEN_USER_DB_PATH= --build-arg MIOPEN_BRANCH=${miopen_branch_name} --build-arg DB_NAME=${db_name} --build-arg DB_USER_NAME=${db_user} --build-arg DB_USER_PASSWORD=${db_password} --build-arg DB_HOSTNAME=${db_host} ."
  sh "echo ${build_args}"
  def tuna_docker_name = getDockerName("HIPNOGPU")
  def job_reason = getJobReason()
  def tuna_docker = docker.build("${tuna_docker_name}", "${build_args}" )
  tuna_docker.inside("--network host  --dns 8.8.8.8 ") {
      checkout scm
      env.PYTHONPATH=env.WORKSPACE
      env.PATH="${env.WORKSPACE}/tuna:${env.PATH}"
      env.TUNA_LOGLEVEL="${tuna_loglevel}"
      sh "./tuna/load_job.py -a gfx908 -n 120 -l ${job_reason} ${load_job_args} --fin_steps \"miopen_find_compile, miopen_find_eval\""
      def num_jobs = runsql("SELECT count(*) from job WHERE reason = '${job_reason}' and arch = 'gfx908' and num_cu = 120;").toInteger()
      sh "echo ${num_jobs} new jobs for gfx908_120"
      sh "./tuna/load_job.py -a gfx906 -n 60 -l ${job_reason} ${load_job_args}  --fin_steps \"miopen_find_compile, miopen_find_eval\""
      num_jobs = runsql("SELECT count(*) from job WHERE reason = '${job_reason}' and arch = 'gfx906' and num_cu = 60;").toInteger()
      sh "echo ${num_jobs} new jobs for gfx906_60"
      sh "./tuna/load_job.py -a gfx900 -n 56 -l ${job_reason} ${load_job_args} --fin_steps \"miopen_find_compile, miopen_find_eval\""
      num_jobs = runsql("SELECT count(*) from job WHERE reason = '${job_reason}' and arch = 'gfx900' and num_cu = 56;").toInteger()
      sh "echo ${num_jobs} new jobs for gfx900_56"
  }
  // push the image 
  tuna_docker.push()

  // get the number of nodes in the all partition on the cluster
  def num_all_nodes = sh(script: "sinfo -h | grep  ${slurm_partition} | grep 'idle ' | awk '{print \$4}'", returnStdout: true).trim()
  // the sinfo command shows failing nodes despite specifying idle state
  // def num_all_nodes = sh(script: "sinfo -h -t idle -p ${slurm_partition} -o '%D'", returnStdout: true).trim()
  sh "echo Total Nodes in all partition: ${num_all_nodes}"
  // def num_cpus = sh(script: "sinfo -t idle -p ${slurm_partition} -h -N -O CPUs | awk '{sum += \$1} END {print sum}'", returnStdout: true).trim()
  // sh "echo Total number of CPUs available: ${num_cpus}"

  // Run the jobs on the cluster
  // sh "srun -p ${slurm_partition} -n ${num_cpus} -l bash -c 'docker run --network host -e TUNA_LOGLEVEL=${tuna_loglevel} -e SLURM_PROCID=\$SLURM_PROCID ${tuna_docker_name} /tuna/tuna/go_fish.py --proc_id \$SLURM_PROCID --fin_steps miopen_find_compile -l ${job_reason} '"
  sh "srun --no-kill -p ${slurm_partition} -N ${num_all_nodes} -l bash -c 'docker run --network host -e TUNA_LOGLEVEL=${tuna_loglevel} ${tuna_docker_name} python3 /tuna/tuna/go_fish.py --fin_steps miopen_find_compile -l ${job_reason} '"
}

def finFindEval(arch)
{
  def build_args = " --build-arg BACKEND=HIP --build-arg MIOPEN_CACHE_DIR= --build-arg MIOPEN_USER_DB_PATH= --build-arg MIOPEN_BRANCH=${miopen_branch_name} --build-arg DB_NAME=${db_name} --build-arg DB_USER_NAME=${db_user} --build-arg DB_USER_PASSWORD=${db_password} --build-arg DB_HOSTNAME=${db_host} ."
  sh "echo ${build_args}"
  def tuna_docker_name = getDockerName("HIP")
  def job_reason = getJobReason()
  def tuna_docker = docker.build("${tuna_docker_name}", "${build_args}" )
  tuna_docker.push()

  def docker_args = " --privileged --device=/dev/kfd --device /dev/dri:/dev/dri:rw --volume /dev/dri:/dev/dri:rw --group-add video "
  // def num_gpus = sh(script: "sinfo -h -t idle -p ${arch} -o '%G %D' | awk '{split(\$1,a,\":\"); print a[3] * \$2}'", returnStdout: true).trim()
  def num_nodes = sh(script: "sinfo -h | grep  ${arch} | grep 'idle ' | awk '{print \$4}'", returnStdout: true).trim()
  // the sinfo command does not respect the idle state despite the -t switch
  // def num_nodes = sh(script: "sinfo -h -t idle -p ${arch} -o '%D' ", returnStdout: true).trim()
  
  sh "srun --no-kill -p ${arch} -N ${num_nodes} -l bash -c 'docker run --network host -e TUNA_LOGLEVEL=${tuna_loglevel} ${docker_args} ${tuna_docker_name} python3 /tuna/tuna/go_fish.py --fin_steps miopen_find_eval -l ${job_reason} '"
}

def exportDb(arch, num_cu)
{
  def build_args = " --build-arg BACKEND=HIPNOGPU --build-arg MIOPEN_CACHE_DIR= --build-arg MIOPEN_USER_DB_PATH= --build-arg MIOPEN_BRANCH=${miopen_branch_name} --build-arg DB_NAME=${db_name} --build-arg DB_USER_NAME=${db_user} --build-arg DB_USER_PASSWORD=${db_password} --build-arg DB_HOSTNAME=${db_host} ."
  sh "echo ${build_args}"
  def tuna_docker_name = getDockerName("HIPNOGPU")
  def job_reason = getJobReason()
  def tuna_docker = docker.build("${tuna_docker_name}", "${build_args}" )
  tuna_docker.inside("--network host  --dns 8.8.8.8 ") {
      checkout scm
      env.PYTHONPATH=env.WORKSPACE
      env.PATH="${env.WORKSPACE}/tuna:${env.PATH}"
      env.TUNA_LOGLEVEL="${tuna_loglevel}"
      def fdb_file = sh(script: "./tuna/export_db.py -a ${arch} -n ${num_cu} -f ", returnStdout: true)
      archiveArtifacts  "${fdb_file}"
      def kdb_file = sh(script: "./tuna/export_db.py -a ${arch} -n ${num_cu} -k ", returnStdout: true)
      archiveArtifacts "${kdb_file}"
  }
}
def successCleanup()
{
  def build_args = " --build-arg BACKEND=HIPNOGPU --build-arg MIOPEN_CACHE_DIR= --build-arg MIOPEN_USER_DB_PATH= --build-arg MIOPEN_BRANCH=${miopen_branch_name} --build-arg DB_NAME=${db_name} --build-arg DB_USER_NAME=${db_user} --build-arg DB_USER_PASSWORD=${db_password} --build-arg DB_HOSTNAME=${db_host} ."
  sh "echo ${build_args}"
  def tuna_docker_name = getDockerName("HIPNOGPU")
  def job_reason = getJobReason()
  def tuna_docker = docker.build("${tuna_docker_name}", "${build_args}" )
  tuna_docker.inside("--network host  --dns 8.8.8.8 ") {
    // This can also be a DELETE ! 
    runsql("UPDATE job SET valid = FALSE WHERE reason = '${job_reason}';")
  }

}
pipeline {
  agent { node { label 'mysql' } }
  stages {
   stage('find compile') {
     steps{
       finFindCompile()
     }
   }
   stage('find eval'){
     parallel{
       stage ("gfx908_120"){
        steps{
          finFindEval("gfx908_120")
          exportDb("gfx908", "120")
        }
       }
       stage("gfx906_60"){
        steps{
          finFindEval("gfx906_60")
          exportDb("gfx906", "60")
        }
       }
       stage("gfx900_56"){
        steps{
          finFindEval("gfx900_56")
          exportDb("gfx900", "56")
        }
       }
     }
   }
  }
  post {
    failure {
      echo "build failed sending email"
      mail to: 'dl.MITunaX@amd.com',
      subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
      body: "solvers pipeline failed  ${env.BUILD_URL}"
    }
    success {
      successCleanup()
    }
  }
}
