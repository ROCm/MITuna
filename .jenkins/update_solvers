def shared_library_branch = scm.branches[0].name
if (shared_library_branch .contains("*/")) {
    shared_library_branch  = shared_library_branch.split("\\*/")[1]
   }
def util_lib="jenkins-shared@${shared_library_branch}"
echo "${util_lib}"

library "${util_lib}"

def VerifyArgs()
{
    if(params.UPDATE_APPLICABILITY && params.session_id=='')
    {
        error "Session id is required for update applicability!"
    }
}

pipeline {
  agent { node { label 'mysql' } }
    environment {
      backend = 'HIPNOGPU'
      tuna_docker_name = utils.getDockerName("${backend}")
      db_host = "${params.db_host}"
      db_name = "${params.db_name}"
      db_user = "${params.db_user}"
      db_password = "${params.db_password}"
  }
  parameters {
    booleanParam(name: "UPDATE_SOLVERS", defaultValue: true, description: "Enable or disable the solver update stage")
    booleanParam(name: "UPDATE_APPLICABILITY", defaultValue: false, description: "Enable or disable the applicability update stage")
    string(name: 'session_id', defaultValue: '', description: 'session id for update applicability')
    choice(name: 'tuna_loglevel', choices: ['WARN', 'ERROR', 'INFO'], description: 'Log level for TUNA')
    choice(name: 'use_mlir', choices: ['On', 'Off'], description: 'Build MIOpen with MLIR enabled')
    string(name: 'db_host', defaultValue: "${headnode}", description: 'Name of the machine hosting the database instance')
    string(name: 'db_name', defaultValue: "${PIPELINE_DB_NAME}", description: 'Name of the database schema')
    string(name: 'db_user', defaultValue: "${PIPELINE_USER}", description: 'Username for the databse')
    string(name: 'db_password', defaultValue: "${PIPELINE_PWD}", description: 'Password for the user')
    string(name: 'docker_registry', defaultValue: "${headnode}:5000", description: 'Name of the docker registry for pushing images')
    string(name: 'base_image', defaultValue: '', description: 'Put a fully qualified docker name here to use (optional)')
  }
  stages {
    stage("Check params")
    {
      steps {
        VerifyArgs()   
      }
    }
    stage('fin Solvers') 
    {
      steps{
        utils.finSolvers()
      }
    }
  }
}
