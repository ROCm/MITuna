def runsql(query) {
    echo "query: ${query}"
    def cmd = $/mysql --protocol tcp -h ${db_host} -u ${db_user} -p${db_password} "${params.db_name}" -e "${query}" -N -s /$
    def res = sh (script: "${cmd}", returnStdout: true).trim()
    return res
}

def getDockerName(backend)
{
  def tuna_docker_name = "${docker_registry}/ci-tuna:${backend}_${env.BUILD_ID}"
  return tuna_docker_name
}

def VerifyArgs()
{
    if(params.UPDATE_APPLICABILITY && params.session_id=='')
    {
        error "Session id is required for update applicability!"
    }
}

pipeline {
  agent { node { label 'mysql' } }
  parameters {
    booleanParam(name: "UPDATE_SOLVERS", defaultValue: true, description: "Enable or disable the solver update stage")
    booleanParam(name: "UPDATE_APPLICABILITY", defaultValue: false, description: "Enable or disable the applicability update stage")
    string(name: 'session_id', defaultValue: '', description: 'session id for update applicability')
    choice(name: 'tuna_loglevel', choices: ['WARN', 'ERROR', 'INFO'], description: 'Log level for TUNA')
    choice(name: 'use_mlir', choices: ['On', 'Off'], description: 'Build MIOpen with MLIR enabled')
    string(name: 'db_host', defaultValue: "${headnode}", description: 'Name of the machine hosting the database instance')
    string(name: 'db_name', defaultValue: "${PIPELINE_DB_NAME}", description: 'Name of the database schema')
    string(name: 'db_user', defaultValue: "${PIPELINE_USER}", description: 'Username for the databse')
    string(name: 'db_password', defaultValue: "${PIPELINE_PWD}", description: 'Password for the user')
    string(name: 'docker_registry', defaultValue: "${headnode}:5000", description: 'Name of the docker registry for pushing images')
    string(name: 'base_image', defaultValue: '', description: 'Put a fully qualified docker name here to use (optional)')
  }
  stages {
    stage("Check params")
    {
      steps {
        VerifyArgs()   
      }
    }
    stage('fin Solvers') 
    {
      steps{
        finSolvers()
      }
    }
  }
}
